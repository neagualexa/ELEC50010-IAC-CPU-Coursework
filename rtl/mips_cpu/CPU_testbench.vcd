$date
	Mon Nov 29 18:24:12 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module CPU_testbench $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " write $end
$var wire 3 # state [2:0] $end
$var wire 32 $ register_v0 [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 1 & read $end
$var wire 4 ' byteenable [3:0] $end
$var wire 32 ( address [31:0] $end
$var wire 1 ) active $end
$var reg 1 * clk $end
$var reg 1 + reset $end
$var reg 1 , waitrequest $end
$scope module datapath $end
$var wire 1 * clk $end
$var wire 1 - pc_ctl $end
$var wire 32 . register_v0 [31:0] $end
$var wire 1 + reset $end
$var wire 1 , waitrequest $end
$var wire 32 / writedata [31:0] $end
$var wire 1 0 zero $end
$var wire 1 " write $end
$var wire 1 1 unsign $end
$var wire 3 2 state [2:0] $end
$var wire 32 3 readdata2 [31:0] $end
$var wire 32 4 readdata1 [31:0] $end
$var wire 32 5 readdata [31:0] $end
$var wire 5 6 readR2 [4:0] $end
$var wire 5 7 readR1 [4:0] $end
$var wire 1 & read $end
$var wire 32 8 pc_in [31:0] $end
$var wire 6 9 instr31_26 [5:0] $end
$var wire 5 : instr25_21 [4:0] $end
$var wire 5 ; instr20_16 [4:0] $end
$var wire 5 < instr15_11 [4:0] $end
$var wire 16 = instr15_0 [15:0] $end
$var wire 32 > full_instr [31:0] $end
$var wire 32 ? address [31:0] $end
$var wire 5 @ Regmux2to1 [4:0] $end
$var wire 32 A RegWritemux2to1 [31:0] $end
$var wire 1 B RegWrite $end
$var wire 1 C RegDst $end
$var wire 1 D PCWriteCond $end
$var wire 1 E PCWrite $end
$var wire 2 F PCSource [1:0] $end
$var wire 32 G PC [31:0] $end
$var wire 1 H MemtoReg $end
$var wire 32 I LO [31:0] $end
$var wire 1 J IorD $end
$var wire 1 K IRWrite $end
$var wire 32 L HI [31:0] $end
$var wire 32 M Decodemux2to1 [31:0] $end
$var wire 4 N ALUctl [3:0] $end
$var wire 32 O ALU_result [31:0] $end
$var wire 64 P ALU_MULTorDIV_result [63:0] $end
$var wire 2 Q ALUSrcB [1:0] $end
$var wire 1 R ALUSrcA $end
$var wire 32 S ALUB [31:0] $end
$var wire 32 T ALUAmux2to1 [31:0] $end
$var reg 32 U ALUOut [31:0] $end
$var reg 1 ) active $end
$var reg 4 V byteenable [3:0] $end
$var reg 32 W regA [31:0] $end
$var reg 32 X regB [31:0] $end
$var reg 1 Y stall $end
$scope module ALU $end
$var wire 32 Z a [31:0] $end
$var wire 1 0 zero $end
$var wire 1 1 unsign $end
$var wire 32 [ b [31:0] $end
$var wire 33 \ B_unsign [32:0] $end
$var wire 33 ] A_unsign [32:0] $end
$var wire 4 ^ ALUOperation [3:0] $end
$var reg 64 _ ALU_MULTorDIV_result [63:0] $end
$var reg 32 ` ALU_result [31:0] $end
$var reg 66 a ALU_temp_MULTorDIV_result [65:0] $end
$var reg 33 b ALU_temp_result [32:0] $end
$var reg 32 c quotient [31:0] $end
$var reg 33 d quotient_unsign [32:0] $end
$var reg 32 e remainder [31:0] $end
$var reg 33 f remainder_unsign [32:0] $end
$upscope $end
$scope module ALUmux4to1 $end
$var wire 6 g opcode [5:0] $end
$var wire 32 h register_b [31:0] $end
$var wire 16 i immediate [15:0] $end
$var wire 2 j ALUSrcB [1:0] $end
$var reg 32 k ALUB [31:0] $end
$var reg 32 l shift_2 [31:0] $end
$var reg 32 m sign_extended [31:0] $end
$upscope $end
$scope module HI_LO_Control $end
$var wire 64 n ALU_MULTorDIV_result [63:0] $end
$var wire 1 * clk $end
$var wire 6 o func_code [5:0] $end
$var wire 6 p opcode [5:0] $end
$var wire 32 q regA [31:0] $end
$var wire 1 + reset $end
$var wire 3 r state [2:0] $end
$var wire 6 s final_code [5:0] $end
$var reg 32 t HI [31:0] $end
$var reg 32 u LO [31:0] $end
$upscope $end
$scope module IR $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 32 v memdata [31:0] $end
$var wire 1 K IRWrite $end
$var reg 16 w instr15_0 [15:0] $end
$var reg 5 x instr20_16 [4:0] $end
$var reg 5 y instr25_21 [4:0] $end
$var reg 6 z instr31_26 [5:0] $end
$upscope $end
$scope module control $end
$var wire 6 { func_code [5:0] $end
$var wire 6 | opcode [5:0] $end
$var wire 3 } state [2:0] $end
$var reg 1 R ALUSrcA $end
$var reg 2 ~ ALUSrcB [1:0] $end
$var reg 4 !" ALUctl [3:0] $end
$var reg 1 K IRWrite $end
$var reg 1 J IorD $end
$var reg 1 & MemRead $end
$var reg 1 " MemWrite $end
$var reg 1 H MemtoReg $end
$var reg 2 "" PCSource [1:0] $end
$var reg 1 E PCWrite $end
$var reg 1 D PCWriteCond $end
$var reg 1 C RegDst $end
$var reg 1 B RegWrite $end
$var reg 4 #" byteenable [3:0] $end
$var reg 1 1 unsign $end
$upscope $end
$scope module pc1 $end
$var wire 1 * clk $end
$var wire 1 - pcctl $end
$var wire 1 + reset $end
$var wire 32 $" pc_prev [31:0] $end
$var reg 32 %" pc_new [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 &" ALUOut [31:0] $end
$var wire 32 '" ALU_result [31:0] $end
$var wire 2 (" PCSource [1:0] $end
$var wire 32 )" PC_in [31:0] $end
$var wire 16 *" instr15_0 [15:0] $end
$var wire 5 +" instr20_16 [4:0] $end
$var wire 5 ," instr25_21 [4:0] $end
$var reg 32 -" Jump_address [31:0] $end
$var reg 32 ." PC_out [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 B RegWrite $end
$var wire 1 * clk $end
$var wire 5 /" readR1 [4:0] $end
$var wire 5 0" readR2 [4:0] $end
$var wire 32 1" readdata1 [31:0] $end
$var wire 32 2" readdata2 [31:0] $end
$var wire 1 + reset $end
$var wire 5 3" writeR [4:0] $end
$var wire 32 4" writedata [31:0] $end
$scope begin $unm_blk_74 $end
$var integer 32 5" i [31:0] $end
$upscope $end
$upscope $end
$scope module stm $end
$var wire 1 * clk $end
$var wire 1 + reset $end
$var wire 1 Y stall $end
$var reg 3 6" state [2:0] $end
$upscope $end
$upscope $end
$scope module ram $end
$var wire 32 7" address [31:0] $end
$var wire 4 8" byteenable [3:0] $end
$var wire 1 * clk $end
$var wire 1 & read $end
$var wire 1 " write $end
$var wire 32 9" writedata [31:0] $end
$var reg 32 :" readdata [31:0] $end
$scope begin $unm_blk_78 $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000000000000 ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx00 -"
bx ,"
bx +"
bx *"
bx )"
b0 ("
bx '"
bx &"
bx %"
bx $"
bx #"
b0 ""
b0 !"
b0 ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx00 l
bx k
b0 j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
b0 ^
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ]
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \
bx [
bx Z
xY
bx X
bx W
bx V
bx U
bx T
bx S
1R
b0 Q
bx P
bx O
b0 N
bx M
bx L
0K
0J
bx I
0H
bx G
b0 F
0E
0D
0C
0B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
01
x0
bx /
bx .
0-
x,
0+
0*
x)
bx (
bx '
0&
bx %
bx $
bx #
0"
bx !
$end
#10
1*
#20
1+
0*
#30
b0 @
b0 3"
b0 s
b100 8
b100 $"
b100 ."
b100 O
b100 `
b100 '"
b0 |
b0 {
b0 g
b0 4
b0 1"
b0 7
b0 /"
b0 3
b0 h
b0 2"
b0 6
b0 0"
b0 p
b0 o
b0 ,"
b0 +"
b0 *"
1-
b0 A
b0 4"
b0 ]
b0 T
b0 Z
b100 \
b100 S
b100 [
b100 k
b0 l
b0 m
b0 -"
b0 (
b0 ?
b0 7"
b0 M
1&
1E
b1 Q
b1 j
b1 ~
0R
b0 $
b0 .
b0 U
b0 &"
b0 !
b0 /
b0 9"
b0 X
b0 W
b0 q
b0 L
b0 t
b0 I
b0 u
b0 =
b0 i
b0 w
b0 ;
b0 x
b0 :
b0 y
b0 >
b0 9
b0 z
b0 G
b0 %"
b0 )"
b0 #
b0 2
b0 r
b0 }
b0 6"
b100000 5"
1*
#40
0+
0*
#50
b1 @
b1 3"
b100011 s
b100 8
b100 $"
b100 ."
b1000000000000010100 -"
b100011 |
b101 {
b100011 g
b1 6
b1 0"
b100011 p
b101 o
b1 +"
b101 *"
0-
b0 \
b0 S
b0 [
b0 k
b100 O
b100 `
b100 '"
b10001100000000010000000000000101 M
1K
0&
0E
b10 Q
b10 j
b10 ~
0R
b100 ]
b100 T
b100 Z
b100 (
b100 ?
b100 7"
b100 A
b100 4"
b0 <
b1 #
b1 2
b1 r
b1 }
b1 6"
b100 G
b100 %"
b100 )"
b100 $
b100 .
b100 U
b100 &"
b10001100000000010000000000000101 %
b10001100000000010000000000000101 5
b10001100000000010000000000000101 v
b10001100000000010000000000000101 :"
1*
#60
0*
#70
b10100 8
b10100 $"
b10100 ."
b10100 O
b10100 `
b10100 '"
b0 ]
b0 T
b0 Z
b10100 \
b10100 S
b10100 [
b10100 k
b10100 l
b101 m
0K
b11 Q
b11 j
b11 ~
1R
b101 =
b101 i
b101 w
b1 ;
b1 x
b10001100000000010000000000000101 >
b100011 9
b100011 z
b10 #
b10 2
b10 r
b10 }
b10 6"
1*
#80
0*
#90
b0 8
b0 $"
b0 ."
b0 O
b0 `
b0 '"
b10100 (
b10100 ?
b10100 7"
b0 \
b0 S
b0 [
b0 k
1&
1J
b0 Q
b0 j
b0 ~
b10100 A
b10100 4"
b11 #
b11 2
b11 r
b11 }
b11 6"
b10100 $
b10100 .
b10100 U
b10100 &"
1*
#100
0*
#110
b100 (
b100 ?
b100 7"
b10000000000000001 A
b10000000000000001 4"
1H
1B
0&
0J
b10000000000000001 %
b10000000000000001 5
b10000000000000001 v
b10000000000000001 :"
b0 $
b0 .
b0 U
b0 &"
b100 #
b100 2
b100 r
b100 }
b100 6"
1*
#120
0*
#130
b1000 8
b1000 $"
b1000 ."
b1000 O
b1000 `
b1000 '"
1-
b100 ]
b100 T
b100 Z
b0 A
b0 4"
b100 \
b100 S
b100 [
b100 k
1&
1E
b1 Q
b1 j
b1 ~
0R
0H
0B
b10000000000000001 3
b10000000000000001 h
b10000000000000001 2"
b0 #
b0 2
b0 r
b0 }
b0 6"
1*
#140
0*
#150
b10 @
b10 3"
b1101 8
b1101 $"
b1101 ."
b10000000000000010100 -"
b1101 O
b1101 `
b1101 '"
b0 3
b0 h
b0 2"
b10 6
b10 0"
b10 +"
0-
b101 \
b101 S
b101 [
b101 k
b1000 A
b1000 4"
b1000 ]
b1000 T
b1000 Z
b1000 (
b1000 ?
b1000 7"
b10001100000000100000000000000101 M
1K
0&
0E
b10 Q
b10 j
b10 ~
0R
b10001100000000100000000000000101 %
b10001100000000100000000000000101 5
b10001100000000100000000000000101 v
b10001100000000100000000000000101 :"
b1000 $
b1000 .
b1000 U
b1000 &"
b10000000000000001 !
b10000000000000001 /
b10000000000000001 9"
b10000000000000001 X
b1000 G
b1000 %"
b1000 )"
b1 #
b1 2
b1 r
b1 }
b1 6"
1*
#160
0*
#170
b10100 8
b10100 $"
b10100 ."
b10100 O
b10100 `
b10100 '"
b10100 \
b10100 S
b10100 [
b10100 k
b0 ]
b0 T
b0 Z
0K
b11 Q
b11 j
b11 ~
1R
b1101 A
b1101 4"
b10 #
b10 2
b10 r
b10 }
b10 6"
b10001100000000100000000000000101 >
b10 ;
b10 x
b1101 $
b1101 .
b1101 U
b1101 &"
b0 !
b0 /
b0 9"
b0 X
1*
#180
0*
#190
b0 8
b0 $"
b0 ."
b0 O
b0 `
b0 '"
b10100 (
b10100 ?
b10100 7"
b0 \
b0 S
b0 [
b0 k
b10100 A
b10100 4"
1&
1J
b0 Q
b0 j
b0 ~
b10100 $
b10100 .
b10100 U
b10100 &"
b11 #
b11 2
b11 r
b11 }
b11 6"
1*
#200
0*
#210
1H
1B
0&
0J
b1000 (
b1000 ?
b1000 7"
b10000000000000001 A
b10000000000000001 4"
b100 #
b100 2
b100 r
b100 }
b100 6"
b0 $
b0 .
b0 U
b0 &"
b10000000000000001 %
b10000000000000001 5
b10000000000000001 v
b10000000000000001 :"
1*
#220
0*
#230
b1100 8
b1100 $"
b1100 ."
b1100 O
b1100 `
b1100 '"
1-
b1000 ]
b1000 T
b1000 Z
b0 A
b0 4"
b100 \
b100 S
b100 [
b100 k
1&
1E
b1 Q
b1 j
b1 ~
0R
0H
0B
b10000000000000001 3
b10000000000000001 h
b10000000000000001 2"
b0 #
b0 2
b0 r
b0 }
b0 6"
1*
#240
0*
#250
b100001 s
b10001 8
b10001 $"
b10001 ."
b100010000110000010000100 -"
b0 |
b100001 {
b0 g
b10000000000000001 4
b10000000000000001 1"
b1 7
b1 /"
b0 p
b100001 o
b1 ,"
b1100000100001 *"
0-
b101 \
b101 S
b101 [
b101 k
b10001 O
b10001 `
b10001 '"
b1000100001100000100001 M
1K
0&
0E
b10 Q
b10 j
b10 ~
0R
b1100 ]
b1100 T
b1100 Z
b1100 (
b1100 ?
b1100 7"
b1100 A
b1100 4"
b11 <
b1 #
b1 2
b1 r
b1 }
b1 6"
b1100 G
b1100 %"
b1100 )"
b1100 $
b1100 .
b1100 U
b1100 &"
b10000000000000001 !
b10000000000000001 /
b10000000000000001 9"
b10000000000000001 X
b1000100001100000100001 %
b1000100001100000100001 5
b1000100001100000100001 v
b1000100001100000100001 :"
1*
#260
0*
#270
b100000000000000010 8
b100000000000000010 $"
b100000000000000010 ."
b100000000000000010 O
b100000000000000010 `
b100000000000000010 '"
b10000000000000001 ]
b10000000000000001 T
b10000000000000001 Z
b10001 A
b10001 4"
b10000000000000001 \
b10000000000000001 S
b10000000000000001 [
b10000000000000001 k
b110000010000100 l
b1100000100001 m
0K
b0 Q
b0 j
b0 ~
1R
b10001 $
b10001 .
b10001 U
b10001 &"
b10000000000000001 W
b10000000000000001 q
b1100000100001 =
b1100000100001 i
b1100000100001 w
b1 :
b1 y
b1000100001100000100001 >
b0 9
b0 z
b10 #
b10 2
b10 r
b10 }
b10 6"
1*
#280
0*
#290
b11 @
b11 3"
1C
1B
b100000000000000010 A
b100000000000000010 4"
b11 #
b11 2
b11 r
b11 }
b11 6"
b100000000000000010 $
b100000000000000010 .
b100000000000000010 U
b100000000000000010 &"
1*
#300
0*
#310
b10 @
b10 3"
1B
0C
b100 #
b100 2
b100 r
b100 }
b100 6"
1*
#320
0*
#330
b10000 8
b10000 $"
b10000 ."
b10000 O
b10000 `
b10000 '"
1-
b1100 ]
b1100 T
b1100 Z
b100 \
b100 S
b100 [
b100 k
1&
1E
b1 Q
b1 j
b1 ~
0R
0B
b100000000000000010 3
b100000000000000010 h
b100000000000000010 2"
b0 #
b0 2
b0 r
b0 }
b0 6"
1*
#340
0*
#350
b100 @
b100 3"
b1001 s
b1100000110001 8
b1100000110001 $"
b1100000110001 ."
b1100100000000000000000100 -"
b1100000110001 O
b1100000110001 `
b1100000110001 '"
b1001 |
b1 {
b1001 g
b100000000000000010 4
b100000000000000010 1"
b11 7
b11 /"
b0 3
b0 h
b0 2"
b100 6
b100 0"
b1001 p
b1 o
b11 ,"
b100 +"
b1 *"
0-
b1100000100001 \
b1100000100001 S
b1100000100001 [
b1100000100001 k
b0 <
b10000 A
b10000 4"
b10000 ]
b10000 T
b10000 Z
b10000 (
b10000 ?
b10000 7"
b100100011001000000000000000001 M
1K
0&
0E
b10 Q
b10 j
b10 ~
0R
b100100011001000000000000000001 %
b100100011001000000000000000001 5
b100100011001000000000000000001 v
b100100011001000000000000000001 :"
b10000 $
b10000 .
b10000 U
b10000 &"
b100000000000000010 !
b100000000000000010 /
b100000000000000010 9"
b100000000000000010 X
b10000 G
b10000 %"
b10000 )"
b1 #
b1 2
b1 r
b1 }
b1 6"
1*
#360
0*
#370
b100000000000000011 8
b100000000000000011 $"
b100000000000000011 ."
b100000000000000010 ]
b100000000000000010 T
b100000000000000010 Z
b100000000000000011 O
b100000000000000011 `
b100000000000000011 '"
0K
b10 Q
b10 j
b10 ~
1R
b1 \
b1 S
b1 [
b1 k
b100 l
b1 m
b1100000110001 A
b1100000110001 4"
b10 #
b10 2
b10 r
b10 }
b10 6"
b1 =
b1 i
b1 w
b100 ;
b100 x
b11 :
b11 y
b100100011001000000000000000001 >
b1001 9
b1001 z
b1100000110001 $
b1100000110001 .
b1100000110001 U
b1100000110001 &"
b0 !
b0 /
b0 9"
b0 X
b100000000000000010 W
b100000000000000010 q
1*
#380
0*
#390
b100000000000000010 8
b100000000000000010 $"
b100000000000000010 ."
b100000000000000010 O
b100000000000000010 `
b100000000000000010 '"
b0 \
b0 S
b0 [
b0 k
b100000000000000011 A
b100000000000000011 4"
1B
b0 Q
b0 j
b0 ~
b100000000000000011 $
b100000000000000011 .
b100000000000000011 U
b100000000000000011 &"
b11 #
b11 2
b11 r
b11 }
b11 6"
1*
#400
0*
#410
b1000000000000000101 8
b1000000000000000101 $"
b1000000000000000101 ."
b1000000000000000101 O
b1000000000000000101 `
b1000000000000000101 '"
b100000000000000011 \
b100000000000000011 S
b100000000000000011 [
b100000000000000011 k
1B
b100000000000000010 A
b100000000000000010 4"
b100000000000000011 3
b100000000000000011 h
b100000000000000011 2"
b100 #
b100 2
b100 r
b100 }
b100 6"
b100000000000000010 $
b100000000000000010 .
b100000000000000010 U
b100000000000000010 &"
1*
#420
0*
#430
b10100 8
b10100 $"
b10100 ."
b10100 O
b10100 `
b10100 '"
1-
b10000 ]
b10000 T
b10000 Z
b100 \
b100 S
b100 [
b100 k
b1000000000000000101 A
b1000000000000000101 4"
1&
1E
b1 Q
b1 j
b1 ~
0R
0B
b100000000000000010 3
b100000000000000010 h
b100000000000000010 2"
b1000000000000000101 $
b1000000000000000101 .
b1000000000000000101 U
b1000000000000000101 &"
b100000000000000011 !
b100000000000000011 /
b100000000000000011 9"
b100000000000000011 X
b0 #
b0 2
b0 r
b0 }
b0 6"
1*
#440
0*
#450
b101011 s
b10101 8
b10101 $"
b10101 ."
b100000000000000010000 -"
b101011 |
b100 {
b101011 g
b0 4
b0 1"
b0 7
b0 /"
b101011 p
b100 o
b0 ,"
b100 *"
0-
b1 \
b1 S
b1 [
b1 k
b10101 O
b10101 `
b10101 '"
b10101100000001000000000000000100 M
1K
0&
0E
b10 Q
b10 j
b10 ~
0R
b10100 ]
b10100 T
b10100 Z
b10100 (
b10100 ?
b10100 7"
b10100 A
b10100 4"
b1 #
b1 2
b1 r
b1 }
b1 6"
b10100 G
b10100 %"
b10100 )"
b10100 $
b10100 .
b10100 U
b10100 &"
b100000000000000010 !
b100000000000000010 /
b100000000000000010 9"
b100000000000000010 X
b10101100000001000000000000000100 %
b10101100000001000000000000000100 5
b10101100000001000000000000000100 v
b10101100000001000000000000000100 :"
1*
#460
0*
#470
b10000 8
b10000 $"
b10000 ."
b10000 O
b10000 `
b10000 '"
b0 ]
b0 T
b0 Z
b10101 A
b10101 4"
b10000 \
b10000 S
b10000 [
b10000 k
b10000 l
b100 m
0K
b11 Q
b11 j
b11 ~
1R
b10101 $
b10101 .
b10101 U
b10101 &"
b0 W
b0 q
b100 =
b100 i
b100 w
b0 :
b0 y
b10101100000001000000000000000100 >
b101011 9
b101011 z
b10 #
b10 2
b10 r
b10 }
b10 6"
1*
#480
0*
#490
b100000000000000010 8
b100000000000000010 $"
b100000000000000010 ."
b100000000000000010 O
b100000000000000010 `
b100000000000000010 '"
b10000 (
b10000 ?
b10000 7"
b100000000000000010 \
b100000000000000010 S
b100000000000000010 [
b100000000000000010 k
1"
1J
b0 Q
b0 j
b0 ~
b10000 A
b10000 4"
b11 #
b11 2
b11 r
b11 }
b11 6"
b10000 $
b10000 .
b10000 U
b10000 &"
1*
#500
0*
#510
b10100 (
b10100 ?
b10100 7"
b100000000000000010 A
b100000000000000010 4"
1B
0"
0J
b100000000000000010 $
b100000000000000010 .
b100000000000000010 U
b100000000000000010 &"
b100 #
b100 2
b100 r
b100 }
b100 6"
1*
#520
0*
